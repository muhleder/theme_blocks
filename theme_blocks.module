<?php
/**
 * @file
 * Allows themes to define blocks.
 */ 

/**
 * Implementation of hook_theme()
 * Load template definitions from theme info file 
 */
function theme_blocks_theme() {
  $info = theme_blocks_get_info();
  $path = NULL;
  if (isset($info['theme_blocks_path'])) {
    $path = drupal_get_path('theme', variable_get('theme_default', 'garland')) ."/{$info['theme_blocks_path']}";
  }
  $items = array();
  foreach ($info['theme_blocks'] as $name => $block) {
    if (isset($block['template'])) {
      $items["theme_block_{$name}"] = array(
        'template' => $block['template'],
        'arguments' => array(),
        'path' => $path
      );
    }
  }
  return $items;
}

/** 
 * Implementation of hook_block()
 * Defines a block for each template file
 */
function theme_blocks_block($op = 'list', $delta = 0, $edit = array()) {
  $info = theme_blocks_get_info();
  if ($op == 'list') {
    $blocks = array();
    foreach ($info['theme_blocks'] as $name => $block) {
      $blocks[$name] = array(
        'info' => t(isset($block['info']) ? $block['info'] : "Theme block: {$name}"),
        'weight' => isset($block['weight']) ? $block['weight'] : 0,
        'status' => isset($block['status']) ? $block['status'] : 0,
        'region' => isset($block['region']) ? $block['region'] : NULL,
        'cache' => isset($block['cache']) ? $block['cache'] : BLOCK_CACHE_PER_ROLE,
      );
    }
    return $blocks;
  }
  else if ($op == 'view') {
    return array('subject' => isset($info['theme_blocks'][$delta]['title']) ? t($info['theme_blocks'][$delta]['title']) : '', 'content' => theme("theme_block_{$delta}"));
  }
}

/**
 * Utility function to get information array for current theme
 */
function theme_blocks_get_info($reset = FALSE) {
  static $info;
  if (!isset($info) || $reset) {
    $result = db_query("SELECT info FROM {system} WHERE type = 'theme' AND name = '%s' LIMIT 1", variable_get('theme_default', 'garland'));
    $info = unserialize(db_result($result));
  }
  return isset($info) ? $info : FALSE;
}

